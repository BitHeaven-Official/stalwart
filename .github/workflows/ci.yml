name: "CI RISC-V"

on:
  workflow_dispatch:
    inputs:
      Release:
        required: false
        default: false
        type: boolean
  push:
     tags: ["v*.*.*"]

env:
  SCCACHE_GHA_ENABLED: true
  RUSTC_WRAPPER: sccache
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  linux:
    permissions:
      id-token: write
      contents: write
      attestations: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: riscv64gc-unknown-linux-gnu
    name: Build / ${{matrix.target}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          disable_annotations: true

      - name: Install cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Update Cargo.lock for RISC-V compatibility
        run: |
          # Update dependencies to ensure RISC-V support (especially ring crate)
          cargo update

      - name: Build with cross
        run: |
          cross build --release --target ${{matrix.target}} -p stalwart --no-default-features --features "sqlite postgres mysql rocks elastic s3 redis azure nats enterprise"
          cross build --release --target ${{matrix.target}} -p stalwart-cli
          mkdir -p artifacts
          mv ./target/${{matrix.target}}/release/stalwart ./artifacts/stalwart
          mv ./target/${{matrix.target}}/release/stalwart-cli ./artifacts/stalwart-cli

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{matrix.target}}
          path: artifacts

  release:
    name: Release
    permissions:
      id-token: write
      contents: write
      attestations: write
    if: github.event_name == 'push' || inputs.Release
    needs: [linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: archive
          pattern: artifact-*

      - name: Compress
        run: |
          set -eux
          BASE_DIR="$(pwd)/archive"
          compress_files() {
              local dir="$1"
              local archive_dir_name="${dir#artifact-}"
              cd "$dir"
              # Process each file in the directory
              for file in `ls`; do
                  filename="${file%.*}"
                  extension="${file##*.}"
                  tar -czf "${filename}-${archive_dir_name}.tar.gz" "$file"
              done
              cd $BASE_DIR
          }
          cd $BASE_DIR
          for arch_dir in `ls`; do
              dir_name=$(basename "$arch_dir")
              compress_files "$dir_name"
          done

      - name: Attest binary
        id: attest
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            archive/**/*.tar.gz

      - name: Use cosign to sign existing artifacts
        uses: sigstore/gh-action-sigstore-python@v3.0.1
        with:
          inputs: |
            archive/**/*.tar.gz

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            archive/**/*.tar.gz
            archive/**/*.sigstore.json
          prerelease: ${{!startsWith(github.ref, 'refs/tags/') || null}}
          tag_name: ${{!startsWith(github.ref, 'refs/tags/') && 'nightly' || null}}
          append_body: true
          body: |
            <hr />

            ### Check binary attestation at [here](${{ steps.attest.outputs.attestation-url }})
